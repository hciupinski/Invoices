@page "/invoices"
@using System.Globalization
@using Invoices.Extensions
@inject InvoiceService InvoiceService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h4" Class="mb-4">Faktury</MudText>

@if (_invoices == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (!_invoices.Any())
{
    <MudAlert Severity="Severity.Info">Brak utworzonych faktur.</MudAlert>
}
else
{
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudTextField @bind-Value="_searchString" Placeholder="Szukaj faktury.." Adornment="Adornment.Start"
                     AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3" />
        
        <MudTable Items="@_filteredInvoices" Dense="true" Hover="true" Bordered="true" Striped="true"
                 OnRowClick="OnRowClick" T="Invoice" Class="mb-3">
            <HeaderContent>
                <MudTh>Numer faktury</MudTh>
                <MudTh>Data utworzenia</MudTh>
                <MudTh>Klient</MudTh>
                <MudTh>Kwota</MudTh>
                <MudTh>Status</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Numer faktury">@context.InvoiceNumber</MudTd>
                <MudTd DataLabel="Data utworzenia">@context.CreationDate?.ToShortDateString()</MudTd>
                <MudTd DataLabel="Klient">@context.ContractorName</MudTd>
                <MudTd DataLabel="Kwota">@context.TotalGrossValue.ToCurrencyString()</MudTd>
                <MudTd DataLabel="Status">
                    @if (context.IsPaid)
                    {
                        <MudChip Color="Color.Success" Size="Size.Small">Zapłacone</MudChip>
                    }
                    else if (context.PaymentDate < DateTime.Now)
                    {
                        <MudChip Color="Color.Error" Size="Size.Small">Termin przekroczony</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Warning" Size="Size.Small">Wysłane</MudChip>
                    }
                </MudTd>
                <MudTd>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomRight">
                        <MudMenuItem OnClick="@(() => ViewInvoice(context))">Edytuj</MudMenuItem>
                        <MudMenuItem OnClick="@(() => PreviewInvoice(context))">Podgląd</MudMenuItem>
                        <MudMenuItem OnClick="@(() => GeneratePdf(context))">Wygeneruj PDF</MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}

@if (_selectedInvoice != null)
{
    <MudPaper Class="pa-4" Elevation="3">
        <EditForm Model="@_selectedInvoice" OnValidSubmit="UpdateInvoice" Context="editFormContext">
            <DataAnnotationsValidator />
            
            <div class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h5">Szczegóły faktury</MudText>
                <div>
                    <MudButton OnClick="@(() => PreviewInvoice(_selectedInvoice))" 
                              Variant="Variant.Outlined" Color="Color.Primary" Class="mx-2">
                        Podgląd
                    </MudButton>
                    <MudButton OnClick="@(() => GeneratePdf(_selectedInvoice))" 
                              Variant="Variant.Outlined" Color="Color.Primary" Class="mx-2">
                        Wygeneruj PDF
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit" 
                              Variant="Variant.Filled" Color="Color.Primary" 
                              Disabled="@_isProcessing">
                        @if (_isProcessing)
                        {
                            <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                            <span>W trakcie zapisu...</span>
                        }
                        else
                        {
                            <span>Zapisz zmiany</span>
                        }
                    </MudButton>
                </div>
            </div>

            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">
                <MudTabPanel Text="Podstawowe informacje">
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudCard Class="mb-4">
                                <MudCardHeader>
                                    <MudText Typo="Typo.h6">Podstawowe informacje</MudText>
                                </MudCardHeader>
                                <MudCardContent>
                                    <div class="d-flex gap-4">
                                        <MudTextField @bind-Value="_selectedInvoice.InvoiceNumber" Label="Numer faktury" 
                                                    For="@(() => _selectedInvoice.InvoiceNumber)" ReadOnly="true" />
                                        <MudDatePicker @bind-Date="_selectedInvoice.CreationDate" Label="Data wystawienia" 
                                                    For="@(() => _selectedInvoice.CreationDate)" Required="true" />
                                    </div>
                                    <div class="d-flex gap-4">
                                        <MudDatePicker @bind-Date="_selectedInvoice.SellDate" Label="Data sprzedaży" 
                                                    For="@(() => _selectedInvoice.SellDate)" Required="true" />
                                        <MudDatePicker @bind-Date="_selectedInvoice.PaymentDate" Label="Termin płatności" 
                                                    For="@(() => _selectedInvoice.PaymentDate)" Required="true" />
                                    </div>
                                    <MudTextField @bind-Value="_selectedInvoice.PaymentMethod" Label="Metoda płatności" 
                                                For="@(() => _selectedInvoice.PaymentMethod)" Margin="Margin.Dense" />
                                    
                                    <div class="d-flex gap-4 mt-4">
                                        <MudCheckBox @bind-Value="_selectedInvoice.IsPaid" Label="Zapłacone??" 
                                                  Color="Color.Primary" />
                                        @if (_selectedInvoice.IsPaid)
                                        {
                                            <MudDatePicker @bind-Date="_selectedInvoice.PaidDate" Label="Termin płatności" />
                                        }
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudCard Class="mb-4">
                                <MudCardHeader>
                                    <MudText Typo="Typo.h6">Informacje o kliencie</MudText>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTextField @bind-Value="_selectedInvoice.ContractorName" Label="Nazwa klienta" 
                                                For="@(() => _selectedInvoice.ContractorName)" Required="true" />
                                    <MudTextField @bind-Value="_selectedInvoice.ContractorAddress" Label="Adres" 
                                                For="@(() => _selectedInvoice.ContractorAddress)" Required="true" />
                                    <div class="d-flex gap-4">
                                        <MudTextField @bind-Value="_selectedInvoice.ContractorCity" Label="Miasto" 
                                                    For="@(() => _selectedInvoice.ContractorCity)" Required="true" />
                                        <MudTextField @bind-Value="_selectedInvoice.ContractorZipCode" Label="Kod pocztowy" 
                                                    For="@(() => _selectedInvoice.ContractorZipCode)" Required="true" />
                                    </div>
                                    <MudTextField @bind-Value="_selectedInvoice.ContractorCountry" Label="Kraj" 
                                                For="@(() => _selectedInvoice.ContractorCountry)" Required="true" />
                                    <MudTextField @bind-Value="_selectedInvoice.ContractorTaxId" Label="NIP" 
                                                For="@(() => _selectedInvoice.ContractorTaxId)" />
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
                
                <MudTabPanel Text="Pozycje">
                    <MudCard>
                        <MudCardHeader>
                            <div class="d-flex justify-space-between align-center w-100">
                                <MudText Typo="Typo.h6">Pozycje</MudText>
                                <MudButton OnClick="AddNewItem" Variant="Variant.Filled" Color="Color.Primary" 
                                         Size="Size.Small" StartIcon="@Icons.Material.Filled.Add">
                                    Dodaj pozycję
                                </MudButton>
                            </div>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (_selectedInvoice.Items.Count == 0)
                            {
                                <MudAlert Severity="Severity.Info">Brak pozycji. Dodaj element używając 'Dodaj pozycję'.</MudAlert>
                            }
                            else
                            {
                                <MudTable Items="@_selectedInvoice.Items" Dense="true" Hover="true" Class="mb-4">
                                    <HeaderContent>
                                        <MudTh>Opis</MudTh>
                                        <MudTh>Ilość</MudTh>
                                        <MudTh>Jednostka</MudTh>
                                        <MudTh>Cena jednostkowa</MudTh>
                                        <MudTh>Stawka VAT</MudTh>
                                        <MudTh>Kwota netto</MudTh>
                                        <MudTh>Kwota brutto</MudTh>
                                        <MudTh></MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="item">
                                        <MudTd DataLabel="Opis">
                                            <MudTextField @bind-Value="item.Description" Required="true" />
                                        </MudTd>
                                        <MudTd DataLabel="Ilośc">
                                            <MudNumericField @bind-Value="item.Quantity" Min="0.001M"
                                                         Format="N3" Required="true" OnBlur="CalculateTotals" />
                                        </MudTd>
                                        <MudTd DataLabel="Jednostka">
                                            <MudTextField @bind-Value="item.Unit" Required="true" />
                                        </MudTd>
                                        <MudTd DataLabel="Cena jednostkowa">
                                            <MudNumericField @bind-Value="item.UnitPrice" Min="0.01M" Culture="_culture"
                                                         Format="C2" Required="true" OnBlur="CalculateTotals" />
                                        </MudTd>
                                        <MudTd DataLabel="Stawka VAT">
                                            <MudNumericField @bind-Value="item.TaxRate" Min="0" Max="100" Culture="_culture"
                                                         Format="N2" Required="true" OnBlur="CalculateTotals" />
                                        </MudTd>
                                        <MudTd DataLabel="Kwota netto">
                                            @item.NetValue.ToCurrencyString()
                                        </MudTd>
                                        <MudTd DataLabel="Kwota brutto">
                                            @item.GrossValue.ToCurrencyString()
                                        </MudTd>
                                        <MudTd>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" 
                                                         OnClick="@(() => RemoveItem(item))" Size="Size.Small" />
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                                
                                <MudSimpleTable Dense="true" Hover="true" Striped="true" Style="width: 300px; margin-left: auto;">
                                    <tbody>
                                        <tr>
                                            <td>Całkowita kwota netto:</td>
                                            <td class="text-right">@_selectedInvoice.TotalNetValue.ToCurrencyString()</td>
                                        </tr>
                                        <tr>
                                            <td>Całkowita kwota VAT:</td>
                                            <td class="text-right">@_selectedInvoice.TotalTaxValue.ToCurrencyString()</td>
                                        </tr>
                                        <tr>
                                            <td>Całkowita kwota brutto:</td>
                                            <td class="text-right font-weight-bold">@_selectedInvoice.TotalGrossValue.ToCurrencyString()</td>
                                        </tr>
                                    </tbody>
                                </MudSimpleTable>
                            }
                            
                            <MudTextField @bind-Value="_selectedInvoice.Notes" Label="Opis" Lines="3" 
                                       For="@(() => _selectedInvoice.Notes)" Class="mt-4" />
                        </MudCardContent>
                    </MudCard>
                </MudTabPanel>
                
                <MudTabPanel Text="Szczegóły firmy">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Szczegóły firmy</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="_selectedInvoice.CompanyName" Label="Nazwa firmy" 
                                                For="@(() => _selectedInvoice.CompanyName)" Required="true" />
                                    <MudTextField @bind-Value="_selectedInvoice.CompanyAddress" Label="Adres" 
                                                For="@(() => _selectedInvoice.CompanyAddress)" Required="true" />
                                    <div class="d-flex gap-4">
                                        <MudTextField @bind-Value="_selectedInvoice.CompanyCity" Label="Miasto" 
                                                    For="@(() => _selectedInvoice.CompanyCity)" Required="true" />
                                        <MudTextField @bind-Value="_selectedInvoice.CompanyZipCode" Label="Kod pocztowy" 
                                                    For="@(() => _selectedInvoice.CompanyZipCode)" Required="true" />
                                    </div>
                                    <MudTextField @bind-Value="_selectedInvoice.CompanyCountry" Label="Kraj" 
                                                For="@(() => _selectedInvoice.CompanyCountry)" Required="true" />
                                    <MudTextField @bind-Value="_selectedInvoice.CompanyTaxId" Label="NIP" 
                                                For="@(() => _selectedInvoice.CompanyTaxId)" />
                                </MudItem>
                                
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="_selectedInvoice.CompanyPhone" Label="Telefon" 
                                                For="@(() => _selectedInvoice.CompanyPhone)" />
                                    <MudTextField @bind-Value="_selectedInvoice.CompanyEmail" Label="Email" 
                                                For="@(() => _selectedInvoice.CompanyEmail)" />
                                    <MudTextField @bind-Value="_selectedInvoice.BankName" Label="Nazwa banku" 
                                                For="@(() => _selectedInvoice.BankName)" />
                                    <MudTextField @bind-Value="_selectedInvoice.BankAccountNumber" Label="Numer konta" 
                                                For="@(() => _selectedInvoice.BankAccountNumber)" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudTabPanel>
            </MudTabs>
        </EditForm>
    </MudPaper>
}

@code {
    private List<Invoice>? _invoices;
    private Invoice? _selectedInvoice;
    private string _searchString = "";
    private bool _isProcessing;
    private CultureInfo _culture => new ("pl-PL");
    
    private IEnumerable<Invoice> _filteredInvoices => _invoices?
        .Where(i => string.IsNullOrWhiteSpace(_searchString) ||
                   i.InvoiceNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                   i.ContractorName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        .OrderByDescending(i => i.CreationDate)
        .ToList() ?? new List<Invoice>();
    
    protected override void OnInitialized()
    {
        _invoices = InvoiceService.GetInvoices().ToList();
    }
    
    private void OnRowClick(TableRowClickEventArgs<Invoice> args)
    {
        ViewInvoice(args.Item);
    }
    
    private void ViewInvoice(Invoice invoice)
    {
        // Create a deep copy of the invoice
        var json = System.Text.Json.JsonSerializer.Serialize(invoice);
        _selectedInvoice = System.Text.Json.JsonSerializer.Deserialize<Invoice>(json);
    }
    
    private async Task PreviewInvoice(Invoice invoice)
    {
        // Placeholder for preview functionality
        await InvoiceService.PreviewInvoicePdfAsync(invoice.Id);
    }
    
    private async Task GeneratePdf(Invoice invoice)
    {
        // Placeholder for PDF generation functionality
        var path = await InvoiceService.GenerateInvoicePdfAsync(invoice.Id, $"{invoice.InvoiceNumber}.pdf");
        
        Snackbar.Add($"PDF wygenerowany w ścieżce : {path}", Severity.Success);
    }
    
    private async Task UpdateInvoice()
    {
        if (_selectedInvoice == null) return;
        
        try
        {
            _isProcessing = true;
            StateHasChanged();
            
            await InvoiceService.UpdateInvoiceAsync(_selectedInvoice);
            
            // Update the local list with the new data
            _invoices = InvoiceService.GetInvoices().ToList();
            
            Snackbar.Add("Faktura zaktualizowana pomyślnie.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd aktualizacji faktury: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }
    
    private void AddNewItem()
    {
        if (_selectedInvoice == null) return;
        
        _selectedInvoice.Items.Add(new InvoiceItem { TaxRate = 23 }); // Default tax rate
        CalculateTotals();
    }
    
    private void RemoveItem(InvoiceItem item)
    {
        if (_selectedInvoice == null) return;
        
        _selectedInvoice.Items.Remove(item);
        CalculateTotals();
    }
    
    private void CalculateTotals()
    {
        if (_selectedInvoice == null) return;
        
        _selectedInvoice.TotalNetValue = _selectedInvoice.Items.Sum(i => i.NetValue);
        _selectedInvoice.TotalTaxValue = _selectedInvoice.Items.Sum(i => i.TaxValue);
        _selectedInvoice.TotalGrossValue = _selectedInvoice.Items.Sum(i => i.GrossValue);
        
        StateHasChanged();
    }
}
@page "/configuration"
@using Invoices.Models
@using Invoices.Services
@using Invoices.Components.Dialogs
@inject InvoiceConfigurationService ConfigService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<h1>Invoice Configuration</h1>

<div class="configuration-container">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Company Details">
            <EditForm Model="@_configuration" OnValidSubmit="SaveCompanyDetails">
                <DataAnnotationsValidator />

                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Company Name" @bind-Value="_configuration.CompanyName" 
                                     For="@(() => _configuration.CompanyName)" Required="true" />
                        
                        <MudTextField Label="Address" @bind-Value="_configuration.CompanyAddress" 
                                     For="@(() => _configuration.CompanyAddress)" Required="true" />
                        
                        <div class="d-flex gap-4">
                            <MudTextField Label="City" @bind-Value="_configuration.CompanyCity" 
                                         For="@(() => _configuration.CompanyCity)" Required="true" />
                            
                            <MudTextField Label="Zip/Postal Code" @bind-Value="_configuration.CompanyZipCode" 
                                         For="@(() => _configuration.CompanyZipCode)" Required="true" />
                        </div>
                        
                        <MudTextField Label="Country" @bind-Value="_configuration.CompanyCountry" 
                                     For="@(() => _configuration.CompanyCountry)" Required="true" />
                        
                        <MudTextField Label="VAT/Tax ID" @bind-Value="_configuration.CompanyTaxId" 
                                     For="@(() => _configuration.CompanyTaxId)" />
                        
                        <div class="d-flex gap-4">
                            <MudTextField Label="Phone" @bind-Value="_configuration.CompanyPhone" 
                                         For="@(() => _configuration.CompanyPhone)" />
                            
                            <MudTextField Label="Email" @bind-Value="_configuration.CompanyEmail" 
                                         For="@(() => _configuration.CompanyEmail)" />
                        </div>
                    </MudCardContent>
                    
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" 
                                  Color="Color.Primary" Class="ml-auto">Save Company Details</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudTabPanel>
        
        <MudTabPanel Text="Tax Settings">
            <EditForm Model="@_configuration" OnValidSubmit="SaveTaxSettings">
                <DataAnnotationsValidator />

                <MudCard>
                    <MudCardContent>
                        <MudNumericField Label="Default Tax Rate (%)" @bind-Value="_configuration.DefaultTaxRate"
                                        For="@(() => _configuration.DefaultTaxRate)" T="decimal" Format="N2" Min="0" Max="100" />
                    </MudCardContent>
                    
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" 
                                  Color="Color.Primary" Class="ml-auto">Save Tax Settings</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudTabPanel>
        
        <MudTabPanel Text="Bank Details">
            <EditForm Model="@_configuration" OnValidSubmit="SaveBankDetails">
                <DataAnnotationsValidator />

                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Bank Name" @bind-Value="_configuration.BankName" 
                                     For="@(() => _configuration.BankName)" />
                        
                        <MudTextField Label="Account Number" @bind-Value="_configuration.BankAccountNumber" 
                                     For="@(() => _configuration.BankAccountNumber)" />
                        
                        <MudTextField Label="IBAN" @bind-Value="_configuration.BankIban" 
                                     For="@(() => _configuration.BankIban)" />
                        
                        <MudTextField Label="BIC/SWIFT" @bind-Value="_configuration.BankSwift" 
                                     For="@(() => _configuration.BankSwift)" />
                    </MudCardContent>
                    
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" 
                                  Color="Color.Primary" Class="ml-auto">Save Bank Details</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudTabPanel>
        
        <MudTabPanel Text="Contractors">
            <MudButton OnClick="@OpenContractorDialog" Variant="Variant.Filled" Color="Color.Primary" 
                      Class="mb-4">Add New Contractor</MudButton>
            
            @if (_contractors.Count == 0)
            {
                <MudAlert Severity="Severity.Info">No contractors added yet.</MudAlert>
            }
            else
            {
                <MudTable Items="@_contractors" Hover="true" Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Address</MudTh>
                        <MudTh>Country</MudTh>
                        <MudTh>Tax ID</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Address">@context.Address, @context.City @context.ZipCode</MudTd>
                        <MudTd DataLabel="Country">@context.Country</MudTd>
                        <MudTd DataLabel="Tax ID">@context.TaxId</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => EditContractor(context))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteContractor(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudTabPanel>
    </MudTabs>
</div>

@code {
    private InvoiceConfiguration _configuration = new();
    private List<Contractor> _contractors = new();
    private Contractor _currentContractor = new();
    private bool _isNewContractor;

    protected override void OnInitialized()
    {
        _configuration = ConfigService.GetConfiguration();
        _contractors = ConfigService.GetContractors().ToList();
    }

    private async Task SaveCompanyDetails()
    {
        await ConfigService.SaveConfigurationAsync(_configuration);
        Snackbar.Add("Company details saved successfully", Severity.Success);
    }

    private async Task SaveTaxSettings()
    {
        await ConfigService.SaveConfigurationAsync(_configuration);
        Snackbar.Add("Tax settings saved successfully", Severity.Success);
    }

    private async Task SaveBankDetails()
    {
        await ConfigService.SaveConfigurationAsync(_configuration);
        Snackbar.Add("Bank details saved successfully", Severity.Success);
    }

    private async Task OpenContractorDialog()
    {
        _currentContractor = new Contractor();
        _isNewContractor = true;
        
        var parameters = new DialogParameters
        {
            ["Contractor"] = _currentContractor,
            ["IsNew"] = _isNewContractor
        };
        
        var dialog = await DialogService.ShowAsync<ContractorDialog>("Add Contractor", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await ConfigService.SaveContractorAsync(_currentContractor);
            _contractors = ConfigService.GetContractors().ToList();
            Snackbar.Add("Contractor added successfully", Severity.Success);
        }
    }

    private async Task EditContractor(Contractor contractor)
    {
        _currentContractor = new Contractor
        {
            Id = contractor.Id,
            Name = contractor.Name,
            Address = contractor.Address,
            City = contractor.City,
            ZipCode = contractor.ZipCode,
            Country = contractor.Country,
            TaxId = contractor.TaxId,
            Phone = contractor.Phone,
            Email = contractor.Email,
            IsActive = contractor.IsActive
        };
        _isNewContractor = false;
        
        var parameters = new DialogParameters
        {
            ["Contractor"] = _currentContractor,
            ["IsNew"] = _isNewContractor
        };
        
        var dialog = await DialogService.ShowAsync<ContractorDialog>("Edit Contractor", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await ConfigService.SaveContractorAsync(_currentContractor);
            _contractors = ConfigService.GetContractors().ToList();
            Snackbar.Add("Contractor updated successfully", Severity.Success);
        }
    }

    private async Task DeleteContractor(Contractor contractor)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Delete Contractor",
            $"Are you sure you want to delete {contractor.Name}?",
            "Yes", "No");
            
        if (confirmed == true)
        {
            await ConfigService.DeleteContractorAsync(contractor.Id);
            _contractors = ConfigService.GetContractors().ToList();
            Snackbar.Add("Contractor deleted successfully", Severity.Success);
        }
    }
}